const express = require('express');
const router = express.Router();
const db = require('../db/database');

// Heal (healer only)
router.post('/heal', (req,res)=>{
  const b=req.body; const io=req.app.get('io');
  const healer=db.getPlayerByName(b.healerName);
  const target=db.getPlayerByName(b.targetName);
  if(!healer||!target) return res.status(400).json({error:'–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'});
  if(!healer.is_healer) return res.status(403).json({error:'–¢–æ–ª—å–∫–æ —Ü–µ–ª–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç –ª–µ—á–∏—Ç—å'});
  if(healer.name===target.name) return res.status(400).json({error:'–ù–µ–ª—å–∑—è –ª–µ—á–∏—Ç—å —Å–µ–±—è'});

  const method = b.method || 'pushups';
  let healAmount = 30; let taskText='–í—ã–ø–µ–π —à–æ—Ç';
  if(method==='pushups'){ healAmount=20; taskText='–û—Ç–æ–∂–º–∏—Å—å 20 —Ä–∞–∑'; }
  else if(method==='squats'){ healAmount=25; taskText='–ü—Ä–∏—Å—è–¥—å 20 —Ä–∞–∑'; }

  const newHP = Math.min(target.health + healAmount, target.max_health);
  db.updatePlayerHealth(target.id, newHP);
  db.addLog('üåø '+healer.name+' –∏—Å—Ü–µ–ª–∏–ª '+target.name+' ('+taskText+') –Ω–∞ '+healAmount+' HP');
  io.emit('game_log',{ message: 'üåø '+healer.name+' –∏—Å—Ü–µ–ª–∏–ª '+target.name+' ('+taskText+') –Ω–∞ '+healAmount+' HP', timestamp: Date.now() });
  io.emit('players_update', db.getOnlinePlayers());
  io.emit('logs_update');
  res.json({ ok:true, healed: healAmount, newHP });
});

// Use action card
router.post('/useAction', (req,res)=>{
  const b=req.body; const io=req.app.get('io');
  const from = db.getPlayerByName(b.fromName);
  const card = db.getCardById(b.cardId);
  if(!from||!card) return res.status(400).json({error:'–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'});
  if(card.type!=='action') return res.status(400).json({error:'–≠—Ç–æ –Ω–µ action-–∫–∞—Ä—Ç–∞'});

  // Check silence
  const now = Date.now();
  if((from.silenced_until||0) > now){
    return res.status(403).json({error:'–í—ã –ø–æ–¥ —ç—Ñ—Ñ–µ–∫—Ç–æ–º –ú–æ–ª—á–∞–Ω–∏—è –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—ã —Å–µ–π—á–∞—Å'});
  }

  // Remove from hand (one-time)
  const hand = from.hand ? JSON.parse(from.hand) : [];
  const idx = hand.findIndex(c => String(c.id) === String(card.id));
  if(idx === -1) return res.status(400).json({error:'–ö–∞—Ä—Ç—ã –Ω–µ—Ç –≤ —Ä—É–∫–µ'});
  hand.splice(idx,1);
  db.updatePlayerHand(from.id, hand);

  // Target select
  let target = from;
  if(card.scope==='other'){
    if(!b.targetName) return res.status(400).json({error:'–ù—É–∂–Ω–∞ —Ü–µ–ª—å'});
    target = db.getPlayerByName(b.targetName);
    if(!target) return res.status(404).json({error:'–¶–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'});
    if(target.name===from.name) return res.status(400).json({error:'–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞'});
  }

  let logParts = [from.name+' –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–∞—Ä—Ç—É \"'+card.name+'\"']
  if(card.scope==='other') logParts.push('–Ω–∞ '+target.name);

  // Effects
  if(card.effect_exp){ const r = db.addExperience(target.id, card.effect_exp); logParts.push('+'+card.effect_exp+' –æ–ø—ã—Ç–∞'); if(r.leveledUp){ logParts.push('üéâ '+target.name+' —É—Ä–æ–≤–µ–Ω—å '+r.newLevel); } }
  if(card.effect_hp){ const newHP=Math.min(target.health+card.effect_hp, target.max_health); db.updatePlayerHealth(target.id, newHP); logParts.push('+'+card.effect_hp+' HP'); }
  if(card.effect_duel_quota){ db.addDuelQuota(target.id, card.effect_duel_quota); logParts.push('+'+card.effect_duel_quota+' –¥—É—ç–ª–µ–π'); }
  if(card.effect_silence_seconds){ const until = Date.now()+card.effect_silence_seconds*1000; db.setSilencedUntil(target.id, until); logParts.push('üîá –º–æ–ª—á–∞–Ω–∏–µ '+card.effect_silence_seconds+'—Å'); }

  const logMsg = logParts.join(' ');
  db.addLog(logMsg);
  io.emit('game_log', { message: logMsg, timestamp: Date.now() });
  io.emit('players_update', db.getOnlinePlayers());
  io.emit('logs_update');

  res.json({ ok:true });
});

module.exports = router;
