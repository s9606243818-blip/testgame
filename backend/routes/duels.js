const express = require('express');
const router = express.Router();
const db = require('../db/database');

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –±–æ–µ–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞
function calculateRound(attacker, defender) {
  // –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —É—Ä–æ–≤–Ω—è (5-15 —É—Ä–æ–Ω–∞)
  const baseDamage = 5 + Math.floor(attacker.level * 0.5);
  
  // –®–∞–Ω—Å –ø—Ä–æ–º–∞—Ö–∞ 15%
  const missChance = 0.15;
  if (Math.random() < missChance) {
    return {
      hit: false,
      damage: 0,
      critical: false,
      message: `${attacker.name} –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è! üí®`
    };
  }
  
  // –®–∞–Ω—Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞—Ä–∞ 20% (–¥–≤–æ–π–Ω–æ–π —É—Ä–æ–Ω)
  const critChance = 0.20;
  const isCritical = Math.random() < critChance;
  
  // –®–∞–Ω—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∑–∞—â–∏—Ç–Ω–∏–∫–∞ 10% (–ø–æ–ª–æ–≤–∏–Ω–∞ —É—Ä–æ–Ω–∞)
  const blockChance = 0.10;
  const isBlocked = Math.random() < blockChance;
  
  let damage = baseDamage;
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
  if (isCritical) {
    damage *= 2;
  }
  
  if (isBlocked) {
    damage = Math.floor(damage * 0.5);
  }
  
  // –°–ª—É—á–∞–π–Ω—ã–π —Ä–∞–∑–±—Ä–æ—Å —É—Ä–æ–Ω–∞ ¬±20%
  const variance = 0.8 + Math.random() * 0.4; // –æ—Ç 0.8 –¥–æ 1.2
  damage = Math.floor(damage * variance);
  
  let message = `${attacker.name} –∞—Ç–∞–∫—É–µ—Ç ${defender.name}`;
  
  if (isCritical) {
    message += ' üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–î–ê–†!';
  }
  if (isBlocked) {
    message += ' üõ°Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!';
  }
  message += ` (${damage} —É—Ä–æ–Ω–∞)`;
  
  return {
    hit: true,
    damage: damage,
    critical: isCritical,
    blocked: isBlocked,
    message: message
  };
}

// –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª–Ω–æ–π –¥—É—ç–ª–∏
function simulateDuel(challenger, opponent) {
  const battleLog = [];
  let chHP = challenger.health;
  let opHP = opponent.health;
  
  battleLog.push(`‚öîÔ∏è –î—É—ç–ª—å –Ω–∞—á–∞–ª–∞—Å—å! ${challenger.name} (${chHP} HP) vs ${opponent.name} (${opHP} HP)`);
  
  let round = 1;
  const maxRounds = 20; // –ú–∞–∫—Å–∏–º—É–º 20 —Ä–∞—É–Ω–¥–æ–≤
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—Ç–æ –∞—Ç–∞–∫—É–µ—Ç –ø–µ—Ä–≤—ã–º (50/50)
  let attackers = Math.random() > 0.5 
    ? [challenger, opponent] 
    : [opponent, challenger];
  
  while (chHP > 0 && opHP > 0 && round <= maxRounds) {
    battleLog.push(`\n--- –†–∞—É–Ω–¥ ${round} ---`);
    
    // –ü–µ—Ä–≤–∞—è –∞—Ç–∞–∫–∞
    const firstAttacker = attackers[0];
    const firstDefender = attackers[1];
    
    const attack1 = calculateRound(firstAttacker, firstDefender);
    battleLog.push(attack1.message);
    
    if (attack1.hit) {
      if (firstDefender.id === challenger.id) {
        chHP -= attack1.damage;
      } else {
        opHP -= attack1.damage;
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–±–µ–¥—É –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –∞—Ç–∞–∫–∏
    if (chHP <= 0 || opHP <= 0) break;
    
    // –í—Ç–æ—Ä–∞—è –∞—Ç–∞–∫–∞ (–∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞)
    const attack2 = calculateRound(firstDefender, firstAttacker);
    battleLog.push(attack2.message);
    
    if (attack2.hit) {
      if (firstAttacker.id === challenger.id) {
        chHP -= attack2.damage;
      } else {
        opHP -= attack2.damage;
      }
    }
    
    battleLog.push(`${challenger.name}: ${Math.max(0, chHP)} HP | ${opponent.name}: ${Math.max(0, opHP)} HP`);
    
    round++;
  }
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
  let winner, loser;
  if (chHP > opHP) {
    winner = challenger;
    loser = opponent;
  } else if (opHP > chHP) {
    winner = opponent;
    loser = challenger;
  } else {
    // –ù–∏—á—å—è - –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –ø–æ —É—Ä–æ–≤–Ω—é, –µ—Å–ª–∏ —É—Ä–æ–≤–Ω–∏ —Ä–∞–≤–Ω—ã - —Å–ª—É—á–∞–π–Ω–æ
    if (challenger.level > opponent.level) {
      winner = challenger;
      loser = opponent;
    } else if (opponent.level > challenger.level) {
      winner = opponent;
      loser = challenger;
    } else {
      const coin = Math.random() > 0.5;
      winner = coin ? challenger : opponent;
      loser = coin ? opponent : challenger;
    }
    battleLog.push(`‚öñÔ∏è –ù–∏—á—å—è –ø–æ HP! –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–æ –∂—Ä–µ–±–∏—é.`);
  }
  
  battleLog.push(`\nüèÜ –ü–æ–±–µ–¥–∏–ª ${winner.name}!`);
  
  return {
    winner,
    loser,
    battleLog,
    finalHP: {
      challenger: Math.max(0, chHP),
      opponent: Math.max(0, opHP)
    }
  };
}

router.post('/challenge', (req, res) => {
  const io = req.app.get('io');
  const { challengerName, opponentName } = req.body;
  
  const ch = db.getPlayerByName(challengerName);
  const op = db.getPlayerByName(opponentName);
  
  if (!ch || !op) {
    return res.status(400).json({ error: '–ò–≥—Ä–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' });
  }
  
  const now = Date.now();
  if ((ch.silenced_until || 0) > now) {
    return res.status(403).json({ error: '–í—ã –ø–æ–¥ —ç—Ñ—Ñ–µ–∫—Ç–æ–º –ú–æ–ª—á–∞–Ω–∏—è' });
  }
  
  // –°–∏–º—É–ª–∏—Ä—É–µ–º –¥—É—ç–ª—å
  const result = simulateDuel(ch, op);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  if (result.winner.id === ch.id) {
    ch.wins++;
    op.losses++;
  } else {
    op.wins++;
    ch.losses++;
  }
  
  // –ù–µ–±–æ–ª—å—à–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –æ–ø—ã—Ç–∞ –∑–∞ —É—á–∞—Å—Ç–∏–µ
  db.addExperience(ch.id, 5);
  db.addExperience(op.id, 5);
  // –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç –±–æ–ª—å—à–µ –æ–ø—ã—Ç–∞
  db.addExperience(result.winner.id, 10);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  db.updatePlayer(ch);
  db.updatePlayer(op);
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∞
  const mainMsg = `‚öîÔ∏è ${ch.name} –≤—ã–∑–≤–∞–ª ${op.name} –Ω–∞ –¥—É—ç–ª—å ‚Ä¢ –ü–æ–±–µ–¥–∏–ª ${result.winner.name} üèÜ`;
  const detailedLog = result.battleLog.join('\n');
  
  // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥ –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  db.addLog(mainMsg);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –ª–æ–≥ –±–æ—è (–∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏)
  result.battleLog.forEach(line => {
    if (line.trim()) { // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
      db.addLog(line);
    }
  });
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è
  io.emit('game_log', { 
    message: mainMsg, 
    timestamp: Date.now() 
  });
  
  io.emit('logs_update');
  io.emit('players_update');
  
  res.json({ 
    ok: true, 
    winner: result.winner.name, 
    loser: result.loser.name,
    battleLog: result.battleLog,
    finalHP: result.finalHP
  });
});

module.exports = router;
